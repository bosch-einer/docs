---
import { getLanguageFromURL } from "../../languages";
import { SIDEBAR } from "../../config";
import lodash from "lodash";
import fs, { link } from "fs";
import LeftSidebarTree from "./LeftSidebarTree";

export type Props = {
  currentPage: string;
};

export type Page = {
  frontmatter: PageFrontMatter;
  file: string;
  url: string;
};

export type PageFrontMatter = {
  layout: string;
  title: string;
  description: string;
  url: string;
};

export type PageFolder = {
  [folderName: string]: PageTree;
};

export type PageChildren = {
  [childrenName: string]: PageFrontMatter;
};

export type PageTree = {
  folders?: PageFolder;
  children?: PageChildren;
  position?: number;
  url?: string;
};

// let tree: PageTree = {
//   folders: {
//     pt: {
//       ,
//     },
//   },
// };

const { currentPage } = Astro.props as Props;
const currentPageMatch = "/" + currentPage.slice(1);
const langCode = getLanguageFromURL(currentPage);

console.log(currentPageMatch);

// const sidebar = SIDEBAR[langCode];

const pages: Page[] = await Astro.glob("../../pages/pt/**/*md");

let pageTree: PageTree = {};

for (const page of pages) {
  const pageSections = page.url.split("/");
  pageSections.splice(0, 1);
  function loopOverSections(index: number): Object {
    if (index >= pageSections.length - 1) {
      const metaLocation =
        pageSections.slice(0, pageSections.length - 1).join("/") +
        "/_meta.json";

      let meta;

      try {
        meta = fs.readFileSync(`./src/pages/${metaLocation}`, {
          encoding: "utf-8",
          flag: "r",
        });
      } catch {}

      if (meta === undefined) meta = pageSections.slice(-1);
      else {
        try {
          meta = JSON.parse(meta);
        } catch (error) {
          meta = pageSections.slice(-1);
        }
      }

      return {
        ...meta,
        children: {
          [pageSections[index]]: {
            ...page.frontmatter,
            url: page.url,
          },
        },
      };
    }
    return {
      folders: {
        [pageSections[index]]: loopOverSections(index + 1),
      },
    };
  }
  pageTree = lodash.merge(pageTree, loopOverSections(0));
}
// console.log(JSON.stringify(pageTree, null, 2));

// needs to traverse tree and sort by position (probably will use a recursive func)
function sortPageTree(tree: PageTree) {
  let sortedTree: PageTree = {};
  let maxPosition = 0;
  if ("position" in tree) {
    // do something here idk
  }
}
sortPageTree(pageTree.folders.pt);
---

<nav aria-labelledby="grid-left">
  <ul class="nav-groups">
    <LeftSidebarTree
      tree={pageTree}
      langCode={langCode}
      currentPageMatch={currentPageMatch}
      Astro={Astro}
    />
    <!-- {
      Object.entries(sidebar).map(([header, children]) => (
        <li>
          <div class="nav-group">
            <h2>{header}</h2>
            <ul>
              {children.map((child) => {
                const url = Astro.site?.pathname + child.link;
                return (
                  <li class="nav-link">
                    <a
                      href={url}
                      aria-current={
                        currentPageMatch === child.link ? "page" : false
                      }
                    >
                      {child.text}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        </li>
      ))
    } -->
    <!-- {
      Object.entries(pageTree.pt).map(([key, value]) => (
        // <li>{JSON.stringify({ [key]: value }, null, 2)}</li>
        <li>
          {(function renderSideBar(node: any) {
            if (!node.children) {
              return Object.entries(node).map(([key, value]) => {
                return <div>{value.title}</div>;
              });
            } else {
              return (
                <div>
                  <h3>{node.name}</h3>
                  {renderSideBar(node.children)}
                </div>
              );
            }
          })(value)}
        </li>
      ))
    } -->
  </ul>
</nav>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    var target = document.querySelector('[aria-current="page"]');
    if (target && target.offsetTop > window.innerHeight - 100) {
      document.querySelector(".nav-groups").scrollTop = target.offsetTop;
    }
  });
</script>

<style>
  nav {
    width: 100%;
    margin-right: 1rem;
  }

  .nav-groups {
    height: 100%;
    padding: 2rem 0;
    overflow-x: visible;
    overflow-y: auto;
    max-height: 100vh;
  }

  .nav-groups > li + li {
    margin-top: 2rem;
  }

  .nav-groups > :first-child {
    padding-top: var(--doc-padding);
  }

  .nav-groups > :last-child {
    padding-bottom: 2rem;
    margin-bottom: var(--theme-navbar-height);
  }

  .nav-group-title {
    font-size: 1rem;
    font-weight: 700;
    padding: 0.1rem 1rem;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
  }

  .nav-link a {
    font-size: 1rem;
    margin: 1px;
    padding: 0.3rem 1rem;
    font: inherit;
    color: inherit;
    text-decoration: none;
    display: block;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    background-color: var(--theme-bg-hover);
  }

  .nav-link a[aria-current="page"] {
    color: var(--theme-text-accent);
    background-color: var(--theme-bg-accent);
    font-weight: 600;
  }

  @media (min-width: 50em) {
    .nav-groups {
      padding: 0;
    }
  }
</style>

<style is:global>
  :root.theme-dark .nav-link a[aria-current="page"] {
    color: hsla(var(--color-base-white), 100%, 1);
  }
</style>
